//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dflow_Inventory.DataContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Inventory_DflowEntities : DbContext
    {
        public Inventory_DflowEntities()
            : base("name=Inventory_DflowEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Item_Master> Item_Master { get; set; }
        public DbSet<Unit_Master> Unit_Master { get; set; }
        public DbSet<Customer_Master> Customer_Master { get; set; }
        public DbSet<Supplier_Master> Supplier_Master { get; set; }
        public DbSet<Designation> Designations { get; set; }
        public DbSet<PurchaseDetail> PurchaseDetails { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<Employment_Status> Employment_Status { get; set; }
        public DbSet<Distributor_Master> Distributor_Master { get; set; }
        public DbSet<Vendor_Master> Vendor_Master { get; set; }
        public DbSet<PurchaseHeader> PurchaseHeaders { get; set; }
        public DbSet<customerType> customerTypes { get; set; }
        public DbSet<Gender> Genders { get; set; }
        public DbSet<marital_Status> marital_Status { get; set; }
        public DbSet<InvoiceDetail> InvoiceDetails { get; set; }
        public DbSet<InvoiceHeader> InvoiceHeaders { get; set; }
        public DbSet<User_Group> User_Group { get; set; }
        public DbSet<User_Master> User_Master { get; set; }
        public DbSet<Expense_Master> Expense_Master { get; set; }
        public DbSet<FinancialYear> FinancialYears { get; set; }
        public DbSet<PaymentMode> PaymentModes { get; set; }
        public DbSet<voucherHeader> voucherHeaders { get; set; }
        public DbSet<Application_Parameter> Application_Parameter { get; set; }
        public DbSet<Stock> Stocks { get; set; }
        public DbSet<StockType> StockTypes { get; set; }
    
        public virtual int sp_Stock_InsertUpdate(Nullable<System.DateTime> stockDate, Nullable<int> itemId, string stockType, Nullable<decimal> quantity, Nullable<int> invoiceId, Nullable<int> purchaseId, string cmdType, Nullable<int> entryBy)
        {
            var stockDateParameter = stockDate.HasValue ?
                new ObjectParameter("stockDate", stockDate) :
                new ObjectParameter("stockDate", typeof(System.DateTime));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            var stockTypeParameter = stockType != null ?
                new ObjectParameter("stockType", stockType) :
                new ObjectParameter("stockType", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(decimal));
    
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("invoiceId", invoiceId) :
                new ObjectParameter("invoiceId", typeof(int));
    
            var purchaseIdParameter = purchaseId.HasValue ?
                new ObjectParameter("purchaseId", purchaseId) :
                new ObjectParameter("purchaseId", typeof(int));
    
            var cmdTypeParameter = cmdType != null ?
                new ObjectParameter("cmdType", cmdType) :
                new ObjectParameter("cmdType", typeof(string));
    
            var entryByParameter = entryBy.HasValue ?
                new ObjectParameter("entryBy", entryBy) :
                new ObjectParameter("entryBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Stock_InsertUpdate", stockDateParameter, itemIdParameter, stockTypeParameter, quantityParameter, invoiceIdParameter, purchaseIdParameter, cmdTypeParameter, entryByParameter);
        }
    
        public virtual ObjectResult<sp_Stock_Report_Result> sp_Stock_Report(Nullable<int> itemId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Stock_Report_Result>("sp_Stock_Report", itemIdParameter, startDateParameter, endDateParameter);
        }
    }
}
